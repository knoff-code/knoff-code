import ollama

#Модель: gpt-oss:20b | Дата: 2025-09-2 | Сжатие: MXFP4 | Размер: 20.9B
#Модель: qwen3:8b | Дата: 2025-09-2 | Сжатие: Q4_K_M | Размер: 8.2B
#Модель: gemma3:12b | Дата: 2025-09-2 | Сжатие: Q4_K_M | Размер: 12.2B

#Использование COM-объекта 1С - для автоматизации на одном компьютере с 1С
#Импорт через XML/JSON файлы - для регулярного обмена данными между системами
#Использование REST API (если в 1С настроен веб-сервис) - для веб-интеграции и работы по сети
#Импорт через текстовые файлы (CSV) - простой способ для ручного импорта через обработки 1С

#Номенклатура.Торговая марка/ Номенклатура/ Характеристика номенклатуры;Фото;Номенклатура.Дополнительное описание номенклатуры;Цена
#ОПТ Луганск

def read_file(file_path):
    try:
        with open(file_path, 'r', encoding='utf-8') as f:
            text_data = f.read()
        return text_data            
    except FileNotFoundError:
        print(f"Ошибка: Файл '{file_path}' не найден.")
        return None
    except Exception as e:
        print(f"Ошибка при чтении файла '{file_path}': {e}")
        return None
    except UnicodeDecodeError as e:
        print(f"Не удалось декодировать файл '{file_path}': {e}")
        return None

def run_ollama(title, desc, i, i_max, model_name="gemma3:12b"):
    categories = read_file("categories_str.txt")
    if categories != None:
        user_input = f"""Ты — профессиональный копирайтер и маркетолог онлайн-магазина строительных и отделочных материалов с опытом работы более 10 лет. Твоя задача — создать коммерчески эффективное название и подробное описание для товара. Инструкции:
Формат вывода:
    Название: Должно быть запоминающимся, побуждать посетить сайт и купить товар, содержать ключевые характеристики (бренд, материал, тип, основное применение).
    Описание:
        Краткий заголовок: главная выгода для покупателя.
        Лид-абзац: несколько предложений о главной выгоде. акцент на пользу для клиента.
        Основные преимущества: список из нескольких пунктов в формате "выгода + доказательство"
        Заключение: естественный призыв к действию.
    Технические характеристики: в формате Параметр: значение
    Категория: определи категорию товара из списка
Концепция и стратегия:
    Основная цель: продажа, увеличение конверсии
    Целевая аудитория: домовладельцы,профессионалы,мастера
    Эмоциональный акцент: надежность,удобство,экономия времени
Стилистические требования и Тон голоса: профессиональный, дружелюбный, экспертный
Список категорий: {categories}
Название товара: {title}
Информация о товаре: {desc}
Сгенерируй название и описание товара, следуя инструкциям."""

        print(user_input)

    # Формат: txt/html/mxl/csv/commerceXL/API/COM/XML 1С УНФ
    #  в виде неформатированного txt (только переносы строк)
    #   Область применения: несколько предложений где и кем может использоваться товар.
    #-   **:** `[Впишите сюда основные параметры, например: "быстросохнущий, глянцевый, для внутренних работ, износостойкий, на водной основе"]`
    #-   **:** `[Впишите сюда, например: "домашние мастера, профессиональные строители"]`   

    try:
        #ollama.generate
        response = ollama.chat(
            model=model_name,
            messages=[{
                'role': 'user',
                'content': user_input
            }]
        )
        formatted_data = response['message']['content'].replace("*", "").lstrip()#replace("\t", "")
        new_title = formatted_data.split('\n')[0]

        print(f"{i}/{i_max} {new_title}")

        file_path = f"texts/{str(i)}.txt"
        file = open(file_path, 'w', encoding='utf-8')
        file.write(formatted_data)
        file.close()
        #with open(file_path,"wb") as f:
        #    f.write(image_data)

    except Exception as e:
        print(f"Error: {e}")

def load_data(file_path):
    text_data = read_file(file_path)
    items = text_data.split("\n")
    i = 0
    i_max = len(items)
    for item in items:
        item_array = item.split("Desc:")
        run_ollama(item_array[0], item_array[1], i, i_max)
        i = i + 1
        break
        #print(f"{i}/{i_max}. {item_array[0]}")
   
if __name__ == "__main__":
    load_data("data.txt")